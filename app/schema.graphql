schema {
  query: ArtistList
}

# Returns an album
type AlbumType implements Node {
  # The ID of an object
  id: ID!
  artistId: String
  title: String
  coverUrl: String
  description: String
  songs(after: String, first: Int, before: String, last: Int): SongTypeConnection
}

# A connection to a list of items.
type AlbumTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AlbumTypeEdge]
}

# An edge in a connection.
type AlbumTypeEdge {
  # The item at the end of the edge
  node: AlbumType

  # A cursor for use in pagination
  cursor: String!
}

# A collection of Artists.
type ArtistList {
  # Returns a collection of artists
  artistsList: [ArtistType]
}

# Returns artist info.
type ArtistType implements Node {
  # The ID of an object
  id: ID!
  name: String
  albums(after: String, first: Int, before: String, last: Int): AlbumTypeConnection
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Returns a single song
type SongType implements Node {
  # The ID of an object
  id: ID!
  albumId: ID
  title: String
  length: String
}

# A connection to a list of items.
type SongTypeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SongTypeEdge]
}

# An edge in a connection.
type SongTypeEdge {
  # The item at the end of the edge
  node: SongType

  # A cursor for use in pagination
  cursor: String!
}

